// This file is auto-generated. Do not edit manually.
// Run 'npm run generate:i18n-types' to regenerate.

export interface Translation {
  oauth: {
    signInTitleWithProvider: string;
    genericSignInTitle: string;
    accessDeniedMessage: string;
    successTitle: string;
    successMessage: string;
    back: string;
    goHome: string;
  };
  appSettings: {
    title: string;
    description: string;
    autoSaveDescription: string;
    revokeTerms: string;
    revokeTermsDescription: string;
    revokeTermsConfirm: string;
    revokeTermsSuccess: string;
    apiUrl: {
      serverUrl: string;
      serverUrlDescription: string;
      placeholder: string;
      reset: string;
      success: string;
      successMessage: string;
      saveError: string;
    };
    retentionPolicies: {
      title: string;
      description: string;
      maxCacheSize: string;
      maxCacheSizeDescription: string;
      maxCacheAge: string;
      maxCacheAgeDescription: string;
    };
    timezone: {
      title: string;
      description: string;
      deviceDefault: string;
      selectTimezone: string;
      selectPlaceholder: string;
      searchTimezone: string;
    };
    localization: {
      title: string;
      description: string;
      selectLanguage: string;
      selectPlaceholder: string;
      searchLanguage: string;
    };
    dateFormat: {
      title: string;
      description: string;
      selectStyle: string;
      selectPlaceholder: string;
      use24Hour: string;
      use24HourDescription: string;
      styles: {
        short: {
          name: string;
          description: string;
        };
        medium: {
          name: string;
          description: string;
        };
        long: {
          name: string;
          description: string;
        };
      };
    };
    autoDownload: {
      title: string;
      description: string;
      enableAutoDownload: string;
      enableAutoDownloadDescription: string;
      downloadOnWiFiOnly: string;
      downloadOnWiFiOnlyDescription: string;
    };
    gqlCache: {
      title: string;
      notificationsCount: string;
      maxStoredTitle: string;
      maxStoredDescription: string;
      maxStoredDaysTitle: string;
      maxStoredDaysDescription: string;
      importExport: {
        title: string;
        description: string;
        exportButton: string;
        exportMetadataButton: string;
        importButton: string;
        exportDescription: string;
        exportMetadataDescription: string;
        importDescription: string;
        importSuccess: string;
        exportError: string;
        importError: string;
        noNotificationsToExport: string;
        confirmImportMessage: string;
        invalidFileFormat: string;
        exportComplete: string;
        exportCompleteMessage: string;
        exportMetadataError: string;
        failedProcess: string;
        failedRead: string;
        failedApply: string;
        importTitle: string;
        importSuccessMessage: string;
        noValidNotificationsFound: string;
        confirmImportTitle: string;
        confirmImportQuestion: string;
        importCompleted: string;
        importCompletedMessage: string;
        exportCompleted: string;
        exportCompletedMessage: string;
        buttons: {
          cancel: string;
          import: string;
        };
        errors: {
          apolloCacheUnavailable: string;
          notificationsArrayNotFound: string;
        };
      };
    };
    notifications: {
      title: string;
      description: string;
      maxStoredTitle: string;
      maxStoredDescription: string;
      generateBucketIconWithInitials: string;
      generateBucketIconWithInitialsDescription: string;
      unencryptOnBigPayload: string;
      unencryptOnBigPayloadDescription: string;
      markAsReadOnView: string;
      markAsReadOnViewDescription: string;
      markAsReadModeTitle: string;
      markAsReadModeDescription: string;
      markAsReadModeLabel: string;
      markAsReadModePlaceholder: string;
      markAsReadMode: {
        onTap: string;
        onView: string;
        onAppClose: string;
      };
      autoAddDeleteAction: string;
      autoAddDeleteActionDescription: string;
      autoAddMarkAsReadAction: string;
      autoAddMarkAsReadActionDescription: string;
      autoAddOpenNotificationAction: string;
      autoAddOpenNotificationActionDescription: string;
      defaultPostpones: string;
      defaultPostponesDescription: string;
      defaultSnoozes: string;
      defaultSnoozesDescription: string;
    };
    theme: {
      title: string;
      subtitle: string;
      selectPreset: string;
      selectPresetPlaceholder: string;
      dynamicColors: string;
      primaryColor: string;
      secondaryColor: string;
      tertiaryColor: string;
      resetToDefault: string;
      generateTheme: string;
      dynamicThemeGenerated: string;
      layoutMode: string;
      layoutModePlaceholder: string;
      currentWidth: string;
      textScale: string;
      textScaleDescription: string;
      layoutModes: {
        auto: string;
        desktop: string;
        tablet: string;
        mobile: string;
      };
      presets: {
        material3: string;
        blue: string;
        red: string;
        yellow: string;
        green: string;
        terra: string;
        hightech: string;
        pastel: string;
        minimal: string;
        custom: string;
      };
      presetDescriptions: {
        material3: string;
        blue: string;
        red: string;
        yellow: string;
        green: string;
        terra: string;
        hightech: string;
        pastel: string;
        minimal: string;
        custom: string;
      };
    };
    logs: {
      exportButton: string;
      exportDescription: string;
      exportComplete: string;
      exportCompleteMessage: string;
      exportError: string;
      clearButton: string;
      clearTitle: string;
      clearMessage: string;
      clearConfirm: string;
      clearSuccess: string;
      clearSuccessMessage: string;
      clearError: string;
      clearErrorMessage: string;
    };
    versions: {
      title: string;
      description: string;
      backend: string;
      backendDescription: string;
      docker: string;
      dockerDescription: string;
      expo: string;
      expoDescription: string;
      platform: string;
      platformDescription: string;
      app: string;
      appDescription: string;
      unknown: string;
      refresh: string;
      otaUpdate: string;
      updateAvailable: string;
      noUpdateAvailable: string;
      reloadError: string;
      reloadErrorMessage: string;
    };
    cache: {
      title: string;
      description: string;
      summary: string;
      mediaSize: string;
      notificationsCount: string;
      totalSize: string;
      items: string;
      inCache: string;
      approximate: string;
      resetCache: string;
    };
    cacheReset: {
      title: string;
      subtitle: string;
      notifications: string;
      notificationsDescription: string;
      media: string;
      mediaDescription: string;
      settings: string;
      settingsDescription: string;
      selectAll: string;
      deselectAll: string;
      reset: string;
      resetting: string;
      confirmTitle: string;
      confirmMessage: string;
      resetSuccess: string;
      resetError: string;
      noSelection: string;
      noSelectionMessage: string;
      completeResetTitle: string;
      completeResetMessage: string;
      completeReset: string;
      completeResetSuccess: string;
      mediaInfo: string;
      notificationsInfo: string;
    };
  };
  compose: {
    messageBuilder: {
      createMessage: string;
      title: string;
      subtitle: string;
      body: string;
      more: string;
      moreDescription: string;
      actions: string;
      attachments: string;
      titlePlaceholder: string;
      subtitlePlaceholder: string;
      bodyPlaceholder: string;
      deliveryTypePlaceholder: string;
      actionsDescription: string;
      attachmentsDescription: string;
      deliveryType: {
        normal: string;
        critical: string;
        silent: string;
      };
    };
  };
  userProfile: {
    title: string;
    description: string;
    errorLoadingData: string;
    noDataAvailable: string;
    username: string;
    email: string;
    firstName: string;
    firstNamePlaceholder: string;
    lastName: string;
    lastNamePlaceholder: string;
    avatar: string;
    avatarPlaceholder: string;
    userId: string;
    userIdCopied: string;
    notAvailable: string;
    notSet: string;
    editProfile: string;
    save: string;
    saving: string;
    changePassword: string;
    deleteAccount: string;
    deleteAccountWarning: string;
    deletingAccount: string;
    logout: string;
    profileUpdateSuccess: string;
    profileUpdateError: string;
    deleteAccountTitle: string;
    deleteAccountMessage: string;
    deleteAccountFinalTitle: string;
    deleteAccountFinalMessage: string;
    oauthConnections: {
      title: string;
      noConnections: string;
      connectedAs: string;
      connected: string;
      connect: string;
      connectionError: string;
      availableToConnect: string;
      disconnect: string;
      disconnectConfirmTitle: string;
      disconnectConfirmMessage: string;
      disconnectSuccess: string;
      disconnectError: string;
    };
    continue: string;
    deleteAccountConfirm: string;
    accountDeletedTitle: string;
    accountDeletedMessage: string;
    currentSessionProvider: string;
    localUser: string;
    notificationStats: string;
    today: string;
    thisWeek: string;
    thisMonth: string;
    last7Days: string;
    last30Days: string;
    total: string;
    acked: string;
  };
  buckets: {
    title: string;
    description: string;
    organize: string;
    noBucketsYet: string;
    createFirstBucket: string;
    danglingBucketTitle: string;
    danglingBuckets: string;
    danglingBucketsDescription: string;
    linkBucket: string;
    showDanglingBuckets: string;
    hideDanglingBuckets: string;
    noDanglingBuckets: string;
    danglingBucketItem: string;
    danglingBucketAction: string;
    danglingBucketActionDescription: string;
    migrateToExisting: string;
    createNewBucket: string;
    cancel: string;
    migrationSuccess: string;
    migrationSuccessMessage: string;
    migrationError: string;
    migrationErrorMessage: string;
    migrating: string;
    migratingDescription: string;
    notification: string;
    notifications: string;
    creatingBucket: string;
    creatingBucketDescription: string;
    bucketCreationSuccess: string;
    bucketCreationSuccessMessage: string;
    bucketCreationError: string;
    bucketCreationErrorMessage: string;
    deleteBucketTitle: string;
    deleteBucket: string;
    deleteBucketConfirmation: string;
    bucketDeletionSuccessMessage: string;
    bucketDeletionErrorMessage: string;
    loadingBucket: string;
    bucketNotFound: string;
    bucketNotFoundDescription: string;
    composeMessage: string;
    item: {
      delete: string;
      created: string;
      bucketIdCopied: string;
      sharedWith: string;
      sharedWithPlural: string;
      notShared: string;
      sharedWithMe: string;
      orphan: string;
      messages: string;
      noActivity: string;
      daysAgo: string;
      hoursAgo: string;
      minutesAgo: string;
      justNow: string;
    };
    form: {
      editTitle: string;
      createTitle: string;
      noBucketId: string;
      bucketNotFound: string;
      loadingBucket: string;
      deleteBucket: string;
      editDescription: string;
      createDescription: string;
      namePlaceholder: string;
      iconPlaceholder: string;
      preview: string;
      iconPreview: string;
      initialsPreview: string;
      colorPreview: string;
      chooseColor: string;
      creating: string;
      updating: string;
      createButton: string;
      updateButton: string;
      bucketId: string;
      bucketIdCopied: string;
      createErrorTitle: string;
      updateErrorTitle: string;
      createErrorMessage: string;
      updateErrorMessage: string;
      readOnlyMode: string;
      readOnlyWarning: string;
      createAccessToken: string;
      createAccessTokenHint: string;
    };
    apiExamples: {
      title: string;
      description: string;
      getRequest: string;
      postJson: string;
      postForm: string;
      withHeaders: string;
    };
    accessTokens: {
      title: string;
      description: string;
      create: string;
      noTokens: string;
      selectToken: string;
      chooseToken: string;
      tokenCreated: string;
      createError: string;
      deleteError: string;
    };
    inviteCodes: {
      title: string;
      description: string;
      create: string;
      createTitle: string;
      editTitle: string;
      shareTitle: string;
      shareMessage: string;
      shareMessageWithLink: string;
      shareMessageComplete: string;
      shareError: string;
      linkCopied: string;
      selectAtLeastOnePermission: string;
      invalidMaxUses: string;
      invalidExpirationDays: string;
      createError: string;
      deleteTitle: string;
      deleteConfirm: string;
      deleteError: string;
      noCodesYet: string;
      code: string;
      permissions: string;
      usage: string;
      exhausted: string;
      expiresAt: string;
      expired: string;
      createdBy: string;
      selectPermissions: string;
      expirationDays: string;
      expirationDaysPlaceholder: string;
      maxUses: string;
      maxUsesPlaceholder: string;
      days: string;
      redeemTitle: string;
      redeemDescription: string;
      redeemTitleManual: string;
      redeemDescriptionManual: string;
      inviteCode: string;
      enterCode: string;
      redeemSuccess: string;
      redeemError: string;
      redeem: string;
      redeemInfo: string;
      redeemInfoManual: string;
      openingApp: string;
      appNotOpening: string;
      manualInstructions: string;
    };
    sharing: {
      title: string;
      description: string;
      shareTitle: string;
      userIdentifier: string;
      userId: string;
      userIdCopied: string;
      identifierPlaceholder: string;
      permissions: string;
      permission: {
        READ: string;
        WRITE: string;
        DELETE: string;
        ADMIN: string;
      };
      share: string;
      editTitle: string;
      update: string;
      loading: string;
      noShares: string;
      enterIdentifier: string;
      shareSuccess: string;
      shareError: string;
      unshareSuccess: string;
      unshareError: string;
      confirmRevoke: string;
      confirmRevokeMessage: string;
      revoke: string;
      unknownUser: string;
      expiresAt: string;
      viaInviteCode: string;
      grantedByOwner: string;
      grantedBy: string;
      grantedByWithOwner: string;
    };
    shareExtension: {
      notAuthenticated: string;
      loading: string;
      retry: string;
      noBuckets: string;
      noBucketsHelper: string;
      header: string;
      updating: string;
      selectBucket: string;
      titleRequired: string;
      titlePlaceholder: string;
      messageLabel: string;
      messagePlaceholder: string;
      sendButton: string;
      errors: {
        titleRequired: string;
        bucketRequired: string;
        notAuthenticated: string;
        sendFailed: string;
      };
      success: {
        title: string;
        message: string;
      };
    };
    delete: {
      modalTitle: string;
      modalDescription: string;
      deleteBucket: string;
      deleteBucketWithPermission: string;
      revokeSharing: string;
      confirm: string;
      confirmDeleteTitle: string;
      confirmDeleteMessage: string;
      confirmRevokeTitle: string;
      confirmRevokeMessage: string;
      error: string;
    };
  };
  devices: {
    title: string;
    description: string;
    registerDevice: string;
    unregisterDevice: string;
    registering: string;
    unregistering: string;
    noDevicesTitle: string;
    noDevicesSubtext: string;
    registerErrorMessage: string;
    unregisterErrorMessage: string;
    removeErrorMessage: string;
    item: {
      delete: string;
      removeDeviceTitle: string;
      removeDeviceMessage: string;
      removeDeviceConfirm: string;
      thisDevice: string;
      registered: string;
      model: string;
      active: string;
      inactive: string;
      lastUsed: string;
      never: string;
      unknown: string;
      unauthorizedErrorMessage: string;
      deviceNotFoundErrorMessage: string;
    };
    editName: {
      title: string;
      description: string;
      namePlaceholder: string;
      nameRequired: string;
      save: string;
      saving: string;
      cancel: string;
      successMessage: string;
      errorMessage: string;
    };
    unauthorizedErrorMessage: string;
    deviceNotFoundErrorMessage: string;
  };
  systemAccessTokens: {
    title: string;
    description: string;
    noTokensTitle: string;
    noTokensSubtext: string;
    deleteError: string;
    activeTokens: string;
    item: {
      delete: string;
      deleteTokenTitle: string;
      deleteTokenMessage: string;
      deleteTokenConfirm: string;
      expired: string;
      created: string;
      calls: string;
      expires: string;
      requester: string;
      description: string;
      scopes: string;
    };
    form: {
      title: string;
      description: string;
      maxCalls: string;
      maxCallsPlaceholder: string;
      expiration: string;
      expirationPlaceholder: string;
      expirationHint: string;
      requester: string;
      requesterPlaceholder: string;
      requesterHint: string;
      selectUser: string;
      noUsers: string;
      descriptionPlaceholder: string;
      descriptionRequired: string;
      creating: string;
      createButton: string;
      maxCallsRequired: string;
      createError: string;
      tokenCreatedTitle: string;
      tokenCreatedSubtitle: string;
      copy: string;
      copied: string;
      tokenCopied: string;
      done: string;
      scopes: string;
      scopesHint: string;
      scope: {
        passthrough: string;
        prometheus: string;
      };
    };
    edit: {
      title: string;
      currentTokenInfo: string;
      updating: string;
      updateButton: string;
      updateSuccess: string;
      updateError: string;
      tokenNotFound: string;
      token: string;
    };
    requests: {
      pendingTitle: string;
      deleteRequestTitle: string;
      deleteRequestMessage: string;
      deleteRequestConfirm: string;
      approve: string;
      decline: string;
      empty: string;
    };
    userRequests: {
      title: string;
      maxRequests: string;
      create: string;
      status: string;
      empty: string;
      noDescription: string;
    };
  };
  accessTokens: {
    title: string;
    description: string;
    noTokensTitle: string;
    noTokensSubtext: string;
    selectToken: string;
    deleteError: string;
    deleteSuccessMessage: string;
    item: {
      edit: string;
      delete: string;
      copyToken: string;
      deleteTokenTitle: string;
      deleteTokenMessage: string;
      deleteTokenConfirm: string;
      expired: string;
      created: string;
      lastUsed: string;
      neverUsed: string;
      expires: string;
      neverExpires: string;
      limitedToBuckets: string;
    };
    form: {
      title: string;
      editTitle: string;
      description: string;
      tokenName: string;
      tokenNamePlaceholder: string;
      expiration: string;
      expirationPlaceholder: string;
      expirationHint: string;
      storeToken: string;
      storeTokenHint: string;
      limitToBuckets: string;
      limitToBucketsHint: string;
      selectBuckets: string;
      selectBucketsPlaceholder: string;
      bucketRequired: string;
      creating: string;
      createButton: string;
      nameRequired: string;
      createError: string;
      updateError: string;
      noTokenId: string;
      tokenNotFound: string;
      tokenId: string;
      tokenIdCopied: string;
      tokenCreatedTitle: string;
      tokenCreatedSubtitle: string;
      tokenCreatedStoredMessage: string;
      tokenCreatedNotStoredMessage: string;
      yourToken: string;
      copy: string;
      copied: string;
      tokenCopied: string;
      done: string;
    };
  };
  userSessions: {
    title: string;
    description: string;
    noSessionsTitle: string;
    noSessionsSubtext: string;
    deleteError: string;
    revokeAllOthers: string;
    revokeAllOthersTitle: string;
    revokeAllOthersMessage: string;
    revokeAllOthersConfirm: string;
    item: {
      revoke: string;
      revokeSessionTitle: string;
      revokeSessionMessage: string;
      revokeSessionConfirm: string;
      current: string;
      expired: string;
      unknownDevice: string;
      ipAddress: string;
      created: string;
      lastActivity: string;
      expires: string;
    };
  };
  notifications: {
    title: string;
    description: string;
    sending: string;
    sendButton: string;
    resetForm: string;
    loadTestData: string;
    warningNotRegistered: string;
    sendErrorTitle: string;
    errors: {
      markAllAsReadFailed: string;
    };
    unreadAbove: string;
    unreadBelow: string;
    deleteSelected: {
      title: string;
      message: string;
    };
    selectAll: string;
    deselectAll: string;
    selectOptions: string;
    refresh: string;
    download: string;
    actions: {
      title: string;
      addAction: string;
      actionType: string;
      selectActionType: string;
      actionValue: string;
      actionValuePlaceholder: string;
      actionTitle: string;
      actionTitlePlaceholder: string;
      iconName: string;
      iconNamePlaceholder: string;
      iconHint: string;
      destructiveAction: string;
      selectWebhook: string;
      searchWebhooks: string;
      actionValueRequired: string;
    };
    endOfList: string;
    titleRequired: string;
    content: {
      title: string;
      titlePlaceholder: string;
      subtitle: string;
      subtitlePlaceholder: string;
      body: string;
      bodyPlaceholder: string;
    };
    automaticActions: {
      title: string;
      description: string;
      addMarkAsReadAction: string;
      addMarkAsReadActionDescription: string;
      addDeleteAction: string;
      addDeleteActionDescription: string;
      addOpenNotificationAction: string;
      addOpenNotificationActionDescription: string;
      snoozeTimes: string;
      snoozeTimesDescription: string;
      snoozeTimePlaceholder: string;
      postponeTimes: string;
      postponeTimesDescription: string;
      postponeTimePlaceholder: string;
    };
    attachments: {
      title: string;
      addMedia: string;
      mediaType: string;
      mediaUrl: string;
      mediaUrlPlaceholder: string;
      mediaName: string;
      mediaNamePlaceholder: string;
      selectMediaType: string;
      hint: string;
    };
    settings: {
      deliveryType: string;
      selectDeliveryType: string;
      sound: string;
      soundPlaceholder: string;
      locale: string;
      localeDescription: string;
      selectLocale: string;
    };
    targeting: {
      bucket: string;
      selectBucket: string;
      loadingBuckets: string;
      bucketRequired: string;
      groupId: string;
      groupIdPlaceholder: string;
      groupIdDefault: string;
      collapseId: string;
      collapseIdPlaceholder: string;
      userIds: string;
      userIdsDescription: string;
      userIdsDefault: string;
    };
    tapAction: {
      title: string;
      description: string;
      addTapAction: string;
      saveTapAction: string;
    };
    examples: {
      testTitle: string;
      testSubtitle: string;
      testBody: string;
      sampleImage: string;
      sampleGif: string;
      sampleVideo: string;
      sampleAudio: string;
      visitWebsite: string;
    };
    form: {
      cancel: string;
    };
    preview: {
      title: string;
      description: string;
      formatJson: string;
      formatCurl: string;
      jsonDescription: string;
      curlDescription: string;
      copyJson: string;
      copyCurl: string;
      copiedJson: string;
      copiedCurl: string;
    };
    noWebhooks: {
      message: string;
    };
    webhookAction: {
      methodRequired: string;
      urlRequired: string;
    };
  };
  home: {
    emptyState: {
      noNotifications: string;
    };
    search: {
      placeholder: string;
    };
  };
  iconEditor: {
    title: string;
    fromUrl: string;
    fromFile: string;
    enterUrl: string;
    urlPlaceholder: string;
    loadImage: string;
    selectFile: string;
    chooseFile: string;
    cropImage: string;
    cropAndUpload: string;
    finalPreview: string;
    urlRequired: string;
    invalidUrl: string;
    filePickError: string;
    cropError: string;
    uploadError: string;
  };
  filters: {
    title: string;
    clearAll: string;
    bucket: string;
    quickFilters: string;
    hideRead: string;
    hideReadDescription: string;
    withMedia: string;
    withMediaDescription: string;
    sortBy: string;
    newestFirst: string;
    oldestFirst: string;
    priority: string;
    hideOlderThan: string;
    showAll: string;
    oneDay: string;
    oneWeek: string;
    oneMonth: string;
    activeFilters: string;
    activeFiltersPlural: string;
    loadOnlyVisible: string;
    loadOnlyVisibleDescription: string;
    performance: string;
    display: string;
    enableHtmlRendering: string;
    enableHtmlRenderingDescription: string;
    timeRange: string;
    timeRangeDescription: string;
    all: string;
    today: string;
    thisWeek: string;
    thisMonth: string;
    customRange: string;
    selectDateRange: string;
    from: string;
    to: string;
  };
  userAttachments: {
    title: string;
    description: string;
    attachments: string;
    totalSize: string;
    noAttachmentsFound: string;
    unableToDownload: string;
    downloadStarted: string;
    downloadFailed: string;
    confirmDelete: string;
    deleteFailed: string;
    deleteSuccess: string;
  };
  swipeActions: {
    delete: {
      label: string;
      title: string;
      message: string;
      confirm: string;
      cancel: string;
      error: string;
    };
    markAsRead: {
      label: string;
    };
    markAsUnread: {
      label: string;
    };
  };
  mediaTypes: {
    IMAGE: string;
    VIDEO: string;
    AUDIO: string;
    GIF: string;
    ICON: string;
    undefined: string;
  };
  common: {
    retry: string;
    add: string;
    home: string;
    cancel: string;
    save: string;
    importing: string;
    delete: string;
    noConnection: string;
    updateAvailable: string;
    reset: string;
    success: string;
    error: string;
    errorOccurred: string;
    ok: string;
    close: string;
    loading: string;
    exporting: string;
    copy: string;
    copied: string;
    copiedToClipboard: string;
    enterNumber: string;
    copyToClipboard: string;
    created: string;
    saved: string;
    savedToGallery: string;
    back: string;
    settings: string;
    general: string;
    info: string;
    offline: string;
    navigationError: string;
    navigationFailed: string;
    actionError: string;
    actionFailed: string;
    snooze: string;
    snoozeMessage: string;
    search: string;
    selectOption: string;
    noResults: string;
    noOptions: string;
    sendEmail: string;
    sendEmailConfirm: string;
    send: string;
    call: string;
    callConfirm: string;
    openLink: string;
    openLinkConfirm: string;
    open: string;
    cannotOpenEmail: string;
    cannotMakeCall: string;
    cannotOpenLink: string;
    snoozeGeneric: string;
    deviceNotRegistered: string;
    notAvailableOnWeb: string;
    shareNotAvailable: string;
    unableToShare: string;
    backendUnreachable: string;
    colorPalette: string;
    customColor: string;
    hexColorCode: string;
    apply: string;
    saving: string;
    all: string;
    enabled: string;
    disabled: string;
    clear: string;
    showing: string;
    of: string;
    results: string;
    page: string;
    loadMore: string;
    endOfResults: string;
    notificationsDisabled: string;
    pushPermissionsHint: string;
    pushPermissionsDetails: string;
    notice: string;
    installApp: string;
    pushNeedsPwaHint: string;
    pushNeedsPwaDetails: string;
    filesystemPermissionDenied: string;
    filesystemPermissionDetails: string;
    selectOptions: string;
    refresh: string;
    download: string;
    actions: string;
    selectAll: string;
    deselectAll: string;
  };
  notificationDetail: {
    loading: string;
    notFound: string;
    title: string;
    sent: string;
    read: string;
    htmlEnabled: string;
    htmlDisabled: string;
    snooze: {
      title: string;
      setSnooze: string;
      removeSnooze: string;
      snoozedUntil: string;
      snoozedFor: string;
      remaining: string;
      quickOptions: string;
      customDateTime: string;
      confirm: string;
      errorSetting: string;
      errorRemoving: string;
      quickTimes: {
        "15min": string;
        "1hour": string;
        "4hours": string;
        "12hours": string;
        "1day": string;
        "3days": string;
        "1week": string;
        "2weeks": string;
      };
      selectDate: string;
      selectTime: string;
    };
    deliveryTypes: {
      SILENT: string;
      NORMAL: string;
      CRITICAL: string;
    };
    notificationCopied: string;
    shareNotification: string;
    copyText: string;
    copySource: string;
    shareText: string;
    shareSource: string;
    viewPayload: string;
    showPayload: string;
    payloadModal: {
      title: string;
      loading: string;
      error: string;
    };
    deleteConfirmTitle: string;
    deleteConfirmMessage: string;
    deleteConfirmButton: string;
    deleteCancelButton: string;
    deleteSuccess: string;
    delete: {
      error: string;
    };
  };
  recurringSnooze: {
    addSchedule: string;
    editSchedule: string;
    addScheduleTitle: string;
    noSchedules: string;
    noSchedulesDescription: string;
    daysOfWeek: string;
    timeRange: string;
    from: string;
    to: string;
    enableSchedule: string;
    cancel: string;
    update: string;
    add: string;
    validation: {
      selectDays: string;
      invalidTimeRange: string;
    };
    days: {
      monday: string;
      tuesday: string;
      wednesday: string;
      thursday: string;
      friday: string;
      saturday: string;
      sunday: string;
    };
    formats: {
      noDaysSelected: string;
      everyDay: string;
      weekdays: string;
      weekends: string;
    };
  };
  bucketSelector: {
    allBuckets: string;
    selectBucket: string;
    searchBuckets: string;
  };
  notificationActions: {
    availableActions: string;
    noActionsAvailable: string;
    actionCount: string;
    actionCountPlural: string;
    actionTypes: {
      NAVIGATE: string;
      BACKGROUND_CALL: string;
      SNOOZE: string;
      CLEAR: string;
      DELETE: string;
      OPEN_NOTIFICATION: string;
      WEBHOOK: string;
    };
    destructive: string;
  };
  attachmentGallery: {
    attachments: string;
  };
  login: {
    welcomeBack: string;
    emailOrUsername: string;
    emailOrUsernamePlaceholder: string;
    password: string;
    passwordPlaceholder: string;
    forgotPassword: string;
    loginButton: string;
    loggingIn: string;
    noAccount: string;
    signUp: string;
    orContinueWith: string;
    providers: {
      cancelled: string;
    };
    validation: {
      emailOrUsernameRequired: string;
      emailOrUsernameMinLength: string;
      passwordRequired: string;
    };
    errors: {
      loginFailed: string;
      connectionError: string;
      invalidCredentials: string;
      networkError: string;
      unexpectedError: string;
    };
  };
  register: {
    title: string;
    firstName: string;
    firstNamePlaceholder: string;
    lastName: string;
    lastNamePlaceholder: string;
    email: string;
    emailPlaceholder: string;
    password: string;
    passwordPlaceholder: string;
    confirmPassword: string;
    confirmPasswordPlaceholder: string;
    registerButton: string;
    registering: string;
    haveAccount: string;
    login: string;
    validation: {
      emailRequired: string;
      emailInvalid: string;
      passwordRequired: string;
      confirmPasswordRequired: string;
      passwordsDoNotMatch: string;
    };
    errors: {
      registrationFailed: string;
      connectionError: string;
    };
    emailConfirmation: {
      title: string;
      description: string;
      resendEmail: string;
      resending: string;
      emailSentMessage: string;
      checkEmail: string;
      notReceived: string;
      spamFolder: string;
    };
  };
  changePassword: {
    title: string;
    description: string;
    currentPassword: string;
    currentPasswordPlaceholder: string;
    newPassword: string;
    newPasswordPlaceholder: string;
    confirmPassword: string;
    confirmPasswordPlaceholder: string;
    changeButton: string;
    changing: string;
    validation: {
      currentPasswordRequired: string;
      newPasswordRequired: string;
      newPasswordMinLength: string;
      passwordsDoNotMatch: string;
      samePassword: string;
    };
    success: {
      title: string;
      message: string;
    };
    errors: {
      title: string;
      unknown: string;
    };
  };
  setPassword: {
    title: string;
    description: string;
    newPasswordPlaceholder: string;
    confirmPasswordPlaceholder: string;
    setButton: string;
    setting: string;
    validation: {
      newPasswordRequired: string;
      newPasswordMinLength: string;
      passwordsDoNotMatch: string;
    };
    success: {
      title: string;
      message: string;
    };
    errors: {
      title: string;
      unknown: string;
    };
  };
  auth: {
    forgotPassword: {
      title: string;
      description: string;
      emailLabel: string;
      emailPlaceholder: string;
      sendResetEmail: string;
      sending: string;
      backToLogin: string;
      emailRequired: string;
      invalidEmail: string;
      codeLabel: string;
      codePlaceholder: string;
      codeRequired: string;
      invalidCode: string;
      verifyCode: string;
      verifying: string;
      newPasswordLabel: string;
      newPasswordPlaceholder: string;
      confirmPasswordLabel: string;
      confirmPasswordPlaceholder: string;
      passwordRequired: string;
      confirmPasswordRequired: string;
      passwordsMismatch: string;
      resetPassword: string;
      resetting: string;
      passwordResetSuccess: string;
      passwordResetSuccessMessage: string;
      codeVerificationFailed: string;
      passwordResetFailed: string;
      passwordTooShort: string;
    };
    emailConfirmation: {
      title: string;
      description: string;
      resendEmail: string;
      resending: string;
      backToLogin: string;
      success: string;
      successMessage: string;
      error: string;
      errorMessage: string;
      enterCode: string;
      codePlaceholder: string;
      verifyCode: string;
      verifying: string;
      invalidCode: string;
      invalidEmail: string;
    };
  };
  webhooks: {
    title: string;
    description: string;
    noWebhooksTitle: string;
    noWebhooksSubtext: string;
    create: string;
    edit: string;
    delete: string;
    deleteConfirmTitle: string;
    deleteConfirmMessage: string;
    deleteSuccessMessage: string;
    deleteErrorMessage: string;
    createErrorMessage: string;
    updateErrorMessage: string;
    form: {
      name: string;
      namePlaceholder: string;
      nameRequired: string;
      method: string;
      url: string;
      urlPlaceholder: string;
      urlRequired: string;
      urlInvalid: string;
      body: string;
      bodyPlaceholder: string;
      bodyHelp: string;
      jsonHelpTitle: string;
      jsonHelpMessage: string;
      jsonExample: string;
      jsonValidationError: string;
      jsonParsingError: string;
      webhookSuccess: string;
      webhookError: string;
      webhookExecutionFailed: string;
      webhookNotFound: string;
      noWebhookId: string;
      save: string;
      saving: string;
      create: string;
      creating: string;
    };
    methods: {
      GET: string;
      POST: string;
      PUT: string;
      PATCH: string;
      DELETE: string;
    };
  };
  entityExecutions: {
    title: string;
    details: string;
    relatedExecutions: string;
    noRelatedExecutions: string;
    lastExecutions: string;
    noExecutions: string;
    duration: string;
    errors: string;
    input: string;
    output: string;
    type: string;
    status: string;
    entityName: string;
    entityId: string;
    userId: string;
    createdAt: string;
    updatedAt: string;
  };
  payloadMappers: {
    title: string;
    description: string;
    noPayloadMappersTitle: string;
    noPayloadMappersSubtext: string;
    create: string;
    edit: string;
    delete: string;
    deleteConfirmTitle: string;
    deleteConfirmMessage: string;
    deleteSuccessMessage: string;
    deleteErrorMessage: string;
    createSuccessMessage: string;
    createErrorMessage: string;
    updateErrorMessage: string;
    builtIn: string;
    cannotEditBuiltIn: string;
    cannotDeleteBuiltIn: string;
    form: {
      name: string;
      namePlaceholder: string;
      nameRequired: string;
      jsEvalFn: string;
      jsEvalFnPlaceholder: string;
      jsEvalFnRequired: string;
      jsEvalFnHelp: string;
      save: string;
      saving: string;
      create: string;
      creating: string;
      test: string;
      testSuccess: string;
      testError: string;
      testInput: string;
      testInputPlaceholder: string;
      testOutput: string;
      testInputHelp: string;
      testInputRequired: string;
      testInputInvalidJson: string;
      testHeadersInvalidJson: string;
      testExecutionError: string;
      jsEvalFnInvalidSyntax: string;
      testHeaders: string;
      testHeadersPlaceholder: string;
      testHeadersHelp: string;
      resetToDefault: string;
      resetToSaved: string;
      requiredUserSettings: string;
      requiredUserSettingsPlaceholder: string;
      requiredUserSettingsHelp: string;
      settingName: string;
      settingValue: string;
    };
    urlGenerator: {
      title: string;
      description: string;
      generatedUrl: string;
    };
  };
  userSettings: {
    Timezone: string;
    Timezone_description: string;
    Language: string;
    Language_description: string;
    UnencryptOnBigPayload: string;
    UnencryptOnBigPayload_description: string;
    ExpoKey: string;
    ExpoKey_description: string;
    HomeassistantUrl: string;
    HomeassistantUrl_description: string;
    HomeassistantToken: string;
    HomeassistantToken_description: string;
    AutoAddDeleteAction: string;
    AutoAddDeleteAction_description: string;
    AutoAddMarkAsReadAction: string;
    AutoAddMarkAsReadAction_description: string;
    AutoAddOpenNotificationAction: string;
    AutoAddOpenNotificationAction_description: string;
    GithubEventsFilter: string;
    GithubEventsFilter_description: string;
  };
  userDropdown: {
    unknownUser: string;
    offlineMode: string;
    gettingStarted: string;
    documentation: string;
    settings: string;
    administration: string;
    logout: string;
    themes: {
      light: string;
      dark: string;
      system: string;
      theme: string;
    };
  };
  administration: {
    title: string;
    userManagement: string;
    userManagementDescription: string;
    loadingUsers: string;
    errorLoadingUsers: string;
    failedToLoadUsers: string;
    retry: string;
    confirm: string;
    cannotModifyOwnRole: string;
    cannotModifyOwnRoleMessage: string;
    changeUserRole: string;
    currentRole: string;
    selectNewRole: string;
    confirmRoleChange: string;
    confirmRoleChangeMessage: string;
    you: string;
    joined: string;
    error: string;
    failedToUpdateUserRole: string;
    userRoleUpdatedSuccessfully: string;
    userDetails: string;
    userId: string;
    username: string;
    email: string;
    createdAt: string;
    lastUpdated: string;
    userBuckets: string;
    noBucketsFound: string;
    userNotificationStats: string;
    loadingStats: string;
    noStatsAvailable: string;
    userNotFound: string;
    totalUsers: string;
    searchUsers: string;
    noUsersFound: string;
    tryDifferentSearch: string;
    noUsers: string;
    noUsersSubtext: string;
    systemSettings: string;
    systemTokensTitle: string;
    systemTokensDescription: string;
    oauthProviders: string;
    oauthProvidersDescription: string;
    errorLoadingOAuthProviders: string;
    errorLoadingOAuthProvidersDescription: string;
    noOAuthProviders: string;
    noOAuthProvidersDescription: string;
    enabled: string;
    disabled: string;
    oauthProviderForm: {
      createTitle: string;
      editTitle: string;
      save: string;
      basicInformation: string;
      nameRequired: string;
      namePlaceholder: string;
      providerIdRequired: string;
      providerIdPlaceholder: string;
      oauthConfiguration: string;
      clientIdRequired: string;
      clientIdPlaceholder: string;
      clientSecretRequired: string;
      clientSecretPlaceholder: string;
      scopes: string;
      scopesPlaceholder: string;
      customUrls: string;
      authorizationUrl: string;
      authorizationUrlPlaceholder: string;
      tokenUrl: string;
      tokenUrlPlaceholder: string;
      userInfoUrl: string;
      userInfoUrlPlaceholder: string;
      appearance: string;
      iconUrl: string;
      iconUrlPlaceholder: string;
      color: string;
      colorPlaceholder: string;
      textColor: string;
      textColorPlaceholder: string;
      creating: string;
      updating: string;
      validation: {
        error: string;
        fillRequiredFields: string;
        fillAllRequiredFields: string;
      };
      success: {
        title: string;
        updated: string;
        deleted: string;
        ok: string;
      };
      delete: {
        title: string;
        message: string;
        cancel: string;
        delete: string;
        deleting: string;
        error: string;
      };
      confirmDeleteProviderTitle: string;
      confirmDeleteProviderMessage: string;
      editProvider: string;
      deleteProvider: string;
      enable: string;
      disable: string;
      errorDeletingOAuthProvider: string;
      errorTogglingOAuthProvider: string;
      loading: string;
      notFound: string;
      noIdProvided: string;
    };
    serverStatus: string;
    logs: string;
    roles: {
      user: string;
      moderator: string;
      admin: string;
    };
    serverSettings: string;
    serverSettingsDescription: string;
    backupManagement: string;
    backupManagementDescription: string;
    userDevices: string;
    noDevicesFound: string;
    localOnly: string;
    lastUsed: string;
    accessDenied: {
      title: string;
      message: string;
    };
  };
  legal: {
    loading: string;
    errorLoading: string;
    errorLoadingDescription: string;
    errorTitle: string;
    errorAcceptingTerms: string;
    acceptTerms: string;
    declineTerms: string;
    declineTermsTitle: string;
    declineTermsMessage: string;
    reviewAgain: string;
    exitApp: string;
    acceptanceRequired: string;
    acceptanceDescription: string;
    acceptanceFooterText: string;
    allDocuments: string;
    version: string;
  };
  navigation: {
    title: string;
    notifications: string;
    settings: string;
    help: string;
    sections: {
      all: string;
      buckets: string;
      gallery: string;
    };
    placeholder: {
      content: string;
      notifications: string;
      buckets: string;
      gallery: string;
    };
  };
  medias: {
    stats: {
      title: string;
      totalItems: string;
      totalSize: string;
      byType: string;
    };
    deleteItem: {
      title: string;
      message: string;
    };
    empty: {
      title: string;
      message: string;
    };
    filters: {
      noType: string;
      allTypes: string;
      selectMediaTypes: string;
      selectAll: string;
      deselectAll: string;
      selectedTypesCount: string;
    };
  };
  cachedMedia: {
    downloadProgress: string;
    loadingProgress: string;
    forceDownload: string;
    delete: string;
    deleteItem: {
      title: string;
      message: string;
    };
  };
  gallery: {
    today: string;
    yesterday: string;
    thisWeek: string;
    thisMonth: string;
    older: string;
    cachedOn: string;
    cachedItems: string;
    statsByType: string;
  };
  gallerySettings: {
    title: string;
    autoPlay: string;
    autoPlayDescription: string;
    showFaultyMedias: string;
    showFaultyMediasDescription: string;
    gridSize: string;
    gridSizeDescription: string;
  };
  onboarding: {
    title: string;
    welcome: {
      title: string;
      description: string;
      description2: string;
    };
    bucket: {
      title: string;
      description: string;
      nameLabel: string;
      namePlaceholder: string;
      createButton: string;
      creating: string;
    };
    token: {
      title: string;
      description: string;
      nameLabel: string;
      namePlaceholder: string;
      createButton: string;
      creating: string;
    };
    notification: {
      title: string;
      description: string;
      titleLabel: string;
      titlePlaceholder: string;
      bodyLabel: string;
      bodyPlaceholder: string;
      sendButton: string;
      sending: string;
    };
    api: {
      title: string;
      description: string;
      documentationInfo: string;
      documentationLink: string;
    };
    navigation: {
      back: string;
      next: string;
      complete: string;
      step: string;
    };
    preview: {
      copy: string;
      copied: string;
    };
    messages: {
      bucketCreateError: string;
      tokenCreated: string;
      tokenCreateError: string;
      notificationSendError: string;
      bucketNameRequired: string;
      tokenNameRequired: string;
      notificationFieldsRequired: string;
      createBucketFirst: string;
      tokenCopied: string;
      useInHeader: string;
    };
  };
  eventsReview: {
    title: string;
    description: string;
    filters: {
      title: string;
      type: string;
      userId: string;
      objectId: string;
      targetId: string;
    };
    empty: {
      title: string;
      description: string;
    };
  };
  appLogs: {
    title: string;
    description: string;
    refresh: string;
    loading: string;
    filterPlaceholder: string;
    logDetailsTitle: string;
    level: string;
    timestamp: string;
    filters: {
      allLevels: string;
      allSources: string;
    };
    fields: {
      tag: string;
      message: string;
      meta: string;
      level: string;
      timestamp: string;
    };
  };
  backupManagement: {
    title: string;
    description: string;
    createBackupTitle: string;
    createBackupDescription: string;
    triggerBackup: string;
    success: string;
    triggerError: string;
    deleteConfirmTitle: string;
    deleteConfirmMessage: string;
    deleteSuccess: string;
    deleteError: string;
    downloadSuccess: string;
    downloadError: string;
    totalBackups: string;
    totalSize: string;
    availableBackups: string;
    noBackups: string;
    filename: string;
    size: string;
    created: string;
  };
  eventTypes: {
    LOGIN: string;
    LOGIN_OAUTH: string;
    LOGOUT: string;
    REGISTER: string;
    PUSH_PASSTHROUGH: string;
    MESSAGE: string;
    NOTIFICATION: string;
    NOTIFICATION_ACK: string;
    BUCKET_CREATION: string;
    BUCKET_SHARING: string;
    BUCKET_UNSHARING: string;
    DEVICE_REGISTER: string;
    DEVICE_UNREGISTER: string;
    ACCOUNT_DELETE: string;
  };
  adminSubscriptions: {
    title: string;
    description: string;
    selectPlaceholder: string;
    selectedInfo: string;
    successMessage: string;
    errorMessage: string;
    loading: string;
  };
  serverSettings: {
    title: string;
    description: string;
    loading: string;
    saving: string;
    saveChanges: string;
    reset: string;
    restartServer: string;
    serverManagement: string;
    serverManagementDescription: string;
    restartConfirm: string;
    restartConfirmMessage: string;
    restartSuccess: string;
    restartFailed: string;
    saveSuccess: string;
    savedSuccessfully: string;
    failedToSave: string;
    failedToLoad: string;
    selectPlaceholder: string;
    warningFooter: string;
    sections: {
      authentication: string;
      apnPush: string;
      firebasePush: string;
      webPush: string;
      pushPassthrough: string;
      email: string;
      attachments: string;
      backup: string;
      messages: string;
      rateLimit: string;
      cors: string;
      logging: string;
      logStorage: string;
      prometheus: string;
    };
    authentication: string;
    apnPush: string;
    firebasePush: string;
    webPush: string;
    pushPassthrough: string;
    email: string;
    attachments: string;
    backup: string;
    messages: string;
    rateLimit: string;
    cors: string;
    logging: string;
    logStorage: string;
    prometheus: string;
    fields: {
      JwtAccessTokenExpiration: string;
      JwtRefreshTokenExpiration: string;
      JwtSecret: string;
      JwtRefreshSecret: string;
      ApnPush: string;
      ApnKeyId: string;
      ApnTeamId: string;
      ApnPrivateKeyPath: string;
      ApnBundleId: string;
      ApnProduction: string;
      FirebasePush: string;
      FirebaseProjectId: string;
      FirebasePrivateKey: string;
      FirebaseClientEmail: string;
      WebPush: string;
      VapidSubject: string;
      PushNotificationsPassthroughServer: string;
      PushPassthroughToken: string;
      EmailEnabled: string;
      EmailType: string;
      EmailHost: string;
      EmailPort: string;
      EmailSecure: string;
      EmailUser: string;
      EmailPass: string;
      EmailFrom: string;
      EmailFromName: string;
      ResendApiKey: string;
      AttachmentsEnabled: string;
      AttachmentsStoragePath: string;
      AttachmentsMaxFileSize: string;
      AttachmentsAllowedMimeTypes: string;
      AttachmentsDeleteJobEnabled: string;
      AttachmentsMaxAge: string;
      BackupEnabled: string;
      BackupExecuteOnStart: string;
      BackupStoragePath: string;
      BackupMaxToKeep: string;
      BackupCronJob: string;
      MessagesMaxAge: string;
      MessagesDeleteJobEnabled: string;
      RateLimitTrustProxyEnabled: string;
      RateLimitForwardHeader: string;
      RateLimitTtlMs: string;
      RateLimitLimit: string;
      RateLimitBlockMs: string;
      RateLimitMessagesRps: string;
      RateLimitMessagesTtlMs: string;
      CorsOrigin: string;
      CorsCredentials: string;
      LogLevel: string;
      LogStorageEnabled: string;
      LogRetentionDays: string;
      PrometheusEnabled: string;
    };
    JwtAccessTokenExpiration: string;
    JwtRefreshTokenExpiration: string;
    JwtSecret: string;
    JwtRefreshSecret: string;
    ApnPush: string;
    ApnKeyId: string;
    ApnTeamId: string;
    ApnPrivateKeyPath: string;
    ApnBundleId: string;
    ApnProduction: string;
    FirebasePush: string;
    FirebaseProjectId: string;
    FirebasePrivateKey: string;
    FirebaseClientEmail: string;
    WebPush: string;
    VapidSubject: string;
    PushNotificationsPassthroughServer: string;
    PushPassthroughToken: string;
    EmailEnabled: string;
    EmailType: string;
    EmailHost: string;
    EmailPort: string;
    EmailSecure: string;
    EmailUser: string;
    EmailPass: string;
    EmailFrom: string;
    EmailFromName: string;
    ResendApiKey: string;
    AttachmentsEnabled: string;
    AttachmentsStoragePath: string;
    AttachmentsMaxFileSize: string;
    AttachmentsAllowedMimeTypes: string;
    AttachmentsDeleteJobEnabled: string;
    AttachmentsMaxAge: string;
    BackupEnabled: string;
    BackupExecuteOnStart: string;
    BackupStoragePath: string;
    BackupMaxToKeep: string;
    BackupCronJob: string;
    MessagesMaxAge: string;
    MessagesDeleteJobEnabled: string;
    RateLimitTrustProxyEnabled: string;
    RateLimitForwardHeader: string;
    RateLimitTtlMs: string;
    RateLimitLimit: string;
    RateLimitBlockMs: string;
    RateLimitMessagesRps: string;
    RateLimitMessagesTtlMs: string;
    CorsOrigin: string;
    CorsCredentials: string;
    LogLevel: string;
    LogStorageEnabled: string;
    LogRetentionDays: string;
    PrometheusEnabled: string;
  };
  serverLogs: {
    title: string;
    description: string;
    refresh: string;
    loading: string;
    filterPlaceholder: string;
    logDetailsTitle: string;
    cleanupButton: string;
    cleanupTitle: string;
    cleanupMessage: string;
    cleanupConfirm: string;
    cleanupSuccess: string;
    cleanupSuccessMessage: string;
    cleanupError: string;
    cleanupErrorMessage: string;
    level: string;
    timestamp: string;
    context: string;
    message: string;
    trace: string;
    meta: string;
    fields: {
      level: string;
      timestamp: string;
      context: string;
      message: string;
      trace: string;
      meta: string;
    };
  };
  dateTime: {
    save: string;
    selectSingle: string;
    selectMultiple: string;
    selectRange: string;
    notAccordingToDateFormat: string;
    mustBeHigherThan: string;
    mustBeLowerThan: string;
    mustBeBetween: string;
    dateIsDisabled: string;
    previous: string;
    next: string;
    typeInDate: string;
    pickDateFromCalendar: string;
    close: string;
    hour: string;
    minute: string;
  };
  onboardingV2: {
    step1: {
      title: string;
      description: string;
      serverConfiguration: string;
      useCustomServer: string;
      customServerUrl: string;
      customServerPlaceholder: string;
      testConnection: string;
      enterServerUrl: string;
      connectionSuccessful: string;
      serverNotResponding: string;
      connectionFailed: string;
    };
    step2: {
      title: string;
      description: string;
      language: string;
      themePreset: string;
      dateFormat: string;
      timezone: string;
      markAsReadMode: string;
      markAsReadModeDescription: string;
      markAsReadModes: {
        onTap: string;
        onView: string;
        onAppClose: string;
      };
      disclaimer: string;
    };
    step3: {
      title: string;
      description: string;
      retentionPreset: string;
      retentionPresetDescription: string;
      presets: {
        low: {
          name: string;
          description: string;
        };
        balanced: {
          name: string;
          description: string;
        };
        longer: {
          name: string;
          description: string;
        };
        custom: {
          name: string;
          description: string;
        };
      };
      maxMediaSize: string;
      maxMediaAge: string;
      maxNotifications: string;
      maxNotificationsAge: string;
      days: string;
      customValues: string;
      autoDownload: string;
      autoDownloadDescription: string;
      enableAutoDownload: string;
      enableAutoDownloadDescription: string;
      wifiOnly: string;
      wifiOnlyDescription: string;
      disclaimer: string;
    };
    step4: {
      title: string;
      description: string;
      checkingDevice: string;
      deviceNotRegistered: string;
      deviceNotRegisteredDescription: string;
      registerDevice: string;
      registeringDevice: string;
      deviceRegistered: string;
      selectBucket: string;
      selectBucketDescription: string;
      bucketLabel: string;
      noBuckets: string;
      createBucket: string;
      createNewBucket: string;
      bucketNameLabel: string;
      bucketNamePlaceholder: string;
      defaultBucketName: string;
      defaultBucketDescription: string;
      createToken: string;
      createTokenDescription: string;
      tokenWillBeCreated: string;
      generateToken: string;
      tokenNameLabel: string;
      tokenNamePlaceholder: string;
      defaultTokenName: string;
      tokenCreated: string;
      tokenSelected: string;
      tokenHint: string;
      tokenSelectedHint: string;
      useExistingToken: string;
      createNewToken: string;
      useExistingBucket: string;
      noTokensAvailable: string;
      selectExistingToken: string;
      selectTokenPlaceholder: string;
      searchTokens: string;
      disclaimer: string;
      setupStatus: string;
      bucketStatus: string;
      tokenStatus: string;
      completeSetupWarning: string;
    };
    step5: {
      title: string;
      description: string;
      titleLabel: string;
      bodyLabel: string;
      defaultTitle: string;
      defaultBody: string;
      sendButton: string;
      sending: string;
      sendSuccess: string;
      sendError: string;
      missingTokenOrBucket: string;
      missingFields: string;
      info: string;
    };
    step6: {
      title: string;
      description: string;
      apiConfiguration: string;
      apiUrl: string;
      accessToken: string;
      bucketId: string;
      curlExample: string;
      copyCurl: string;
      copied: string;
      copyError: string;
      congratulations: string;
      completionMessage: string;
      documentationTitle: string;
      documentationDescription: string;
      openDocumentation: string;
      openDocError: string;
    };
  };
  shareExtension: {
    header: string;
    selectBucket: string;
    titleLabel: string;
    titleRequired: string;
    titlePlaceholder: string;
    messageLabel: string;
    messagePlaceholder: string;
    sendButton: string;
    sendingButton: string;
    loading: string;
    updating: string;
    notAuthenticated: string;
    noBuckets: string;
    noBucketsHelper: string;
    retry: string;
    errors: {
      titleRequired: string;
      bucketRequired: string;
      notAuthenticated: string;
      sendFailed: string;
      loadFailed: string;
    };
    success: {
      title: string;
      message: string;
    };
  };
  notFound: {
    title: string;
    description: string;
    goHome: string;
  };
}

